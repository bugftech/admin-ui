/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

/// <reference types="unplugin-vue-router/client" />

import type {
  // type safe route locations
  RouteLocationTypedList,
  RouteLocationResolvedTypedList,
  RouteLocationNormalizedTypedList,
  RouteLocationNormalizedLoadedTypedList,
  RouteLocationAsString,
  RouteLocationAsRelativeTypedList,
  RouteLocationAsPathTypedList,

  // helper types
  // route definitions
  RouteRecordInfo,
  ParamValue,
  ParamValueOneOrMore,
  ParamValueZeroOrMore,
  ParamValueZeroOrOne,

  // vue-router extensions
  _RouterTyped,
  RouterLinkTyped,
  RouterLinkPropsTyped,
  NavigationGuard,
  UseLinkFnTyped,

  // data fetching
  _DataLoader,
  _DefineLoaderOptions,
} from 'unplugin-vue-router/types'

declare module 'vue-router/auto/routes' {
  export interface RouteNamedMap {
    '/analytics/': RouteRecordInfo<'/analytics/', '/analytics', Record<never, never>, Record<never, never>>,
    '/apps/': RouteRecordInfo<'/apps/', '/apps', Record<never, never>, Record<never, never>>,
    '/apps/[id]': RouteRecordInfo<'/apps/[id]', '/apps/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/apps/new': RouteRecordInfo<'/apps/new', '/apps/new', Record<never, never>, Record<never, never>>,
    '/customers/': RouteRecordInfo<'/customers/', '/customers', Record<never, never>, Record<never, never>>,
    '/customers/[id]': RouteRecordInfo<'/customers/[id]', '/customers/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/customers/new': RouteRecordInfo<'/customers/new', '/customers/new', Record<never, never>, Record<never, never>>,
    '/discounts/': RouteRecordInfo<'/discounts/', '/discounts', Record<never, never>, Record<never, never>>,
    '/discounts/[id]': RouteRecordInfo<'/discounts/[id]', '/discounts/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/discounts/new': RouteRecordInfo<'/discounts/new', '/discounts/new', Record<never, never>, Record<never, never>>,
    '/editor': RouteRecordInfo<'/editor', '/editor', Record<never, never>, Record<never, never>>,
    '/landing/': RouteRecordInfo<'/landing/', '/', Record<never, never>, Record<never, never>>,
    '/login': RouteRecordInfo<'/login', '/login', Record<never, never>, Record<never, never>>,
    '/onlinestore/': RouteRecordInfo<'/onlinestore/', '/onlinestore', Record<never, never>, Record<never, never>>,
    'orders': RouteRecordInfo<'orders', '/orders', Record<never, never>, Record<never, never>>,
    '/orders/[id]': RouteRecordInfo<'/orders/[id]', '/orders/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/overview': RouteRecordInfo<'/overview', '/overview', Record<never, never>, Record<never, never>>,
    '/pays/': RouteRecordInfo<'/pays/', '/pays', Record<never, never>, Record<never, never>>,
    '/pays/wechat/[id]': RouteRecordInfo<'/pays/wechat/[id]', '/pays/wechat/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/pays/wechat/new': RouteRecordInfo<'/pays/wechat/new', '/pays/wechat/new', Record<never, never>, Record<never, never>>,
    '/pms/brands/': RouteRecordInfo<'/pms/brands/', '/pms/brands', Record<never, never>, Record<never, never>>,
    '/pms/brands/[id]': RouteRecordInfo<'/pms/brands/[id]', '/pms/brands/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/pms/brands/new': RouteRecordInfo<'/pms/brands/new', '/pms/brands/new', Record<never, never>, Record<never, never>>,
    '/pms/categories/': RouteRecordInfo<'/pms/categories/', '/pms/categories', Record<never, never>, Record<never, never>>,
    '/pms/categories/[id]': RouteRecordInfo<'/pms/categories/[id]', '/pms/categories/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/pms/categories/new': RouteRecordInfo<'/pms/categories/new', '/pms/categories/new', Record<never, never>, Record<never, never>>,
    '/pms/collections/': RouteRecordInfo<'/pms/collections/', '/pms/collections', Record<never, never>, Record<never, never>>,
    '/pms/collections/[id]': RouteRecordInfo<'/pms/collections/[id]', '/pms/collections/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/pms/collections/new': RouteRecordInfo<'/pms/collections/new', '/pms/collections/new', Record<never, never>, Record<never, never>>,
    '/pms/products/': RouteRecordInfo<'/pms/products/', '/pms/products', Record<never, never>, Record<never, never>>,
    '/pms/products/[id]': RouteRecordInfo<'/pms/products/[id]', '/pms/products/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/pms/products/new': RouteRecordInfo<'/pms/products/new', '/pms/products/new', Record<never, never>, Record<never, never>>,
    '/pms/stocks/': RouteRecordInfo<'/pms/stocks/', '/pms/stocks', Record<never, never>, Record<never, never>>,
    '/referrals/': RouteRecordInfo<'/referrals/', '/referrals', Record<never, never>, Record<never, never>>,
    '/referrals/[id]': RouteRecordInfo<'/referrals/[id]', '/referrals/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/referrals/analytics': RouteRecordInfo<'/referrals/analytics', '/referrals/analytics', Record<never, never>, Record<never, never>>,
    '/referrals/new': RouteRecordInfo<'/referrals/new', '/referrals/new', Record<never, never>, Record<never, never>>,
    '/register': RouteRecordInfo<'/register', '/register', Record<never, never>, Record<never, never>>,
    '/settings/user': RouteRecordInfo<'/settings/user', '/settings/user', Record<never, never>, Record<never, never>>,
    '/wireless/': RouteRecordInfo<'/wireless/', '/wireless', Record<never, never>, Record<never, never>>,
    '/wireless/[id]': RouteRecordInfo<'/wireless/[id]', '/wireless/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/wireless/new': RouteRecordInfo<'/wireless/new', '/wireless/new', Record<never, never>, Record<never, never>>,
  }
}

declare module 'vue-router/auto' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export type RouterTyped = _RouterTyped<RouteNamedMap>

  /**
   * Type safe version of `RouteLocationNormalized` (the type of `to` and `from` in navigation guards).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalized<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationNormalizedLoaded` (the return type of `useRoute()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationNormalizedLoaded<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationResolved` (the returned route of `router.resolve()`).
   * Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationResolved<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationResolvedTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocation` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocation<Name extends keyof RouteNamedMap = keyof RouteNamedMap> = RouteLocationTypedList<RouteNamedMap>[Name]

  /**
   * Type safe version of `RouteLocationRaw` . Allows passing the name of the route to be passed as a generic.
   */
  export type RouteLocationRaw<Name extends keyof RouteNamedMap = keyof RouteNamedMap> =
    | RouteLocationAsString<RouteNamedMap>
    | RouteLocationAsRelativeTypedList<RouteNamedMap>[Name]
    | RouteLocationAsPathTypedList<RouteNamedMap>[Name]

  /**
   * Generate a type safe params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParams<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['params']
  /**
   * Generate a type safe raw params for a route location. Requires the name of the route to be passed as a generic.
   */
  export type RouteParamsRaw<Name extends keyof RouteNamedMap> = RouteNamedMap[Name]['paramsRaw']

  export function useRouter(): RouterTyped
  export function useRoute<Name extends keyof RouteNamedMap = keyof RouteNamedMap>(name?: Name): RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[Name]

  export const useLink: UseLinkFnTyped<RouteNamedMap>

  export function onBeforeRouteLeave(guard: NavigationGuard<RouteNamedMap>): void
  export function onBeforeRouteUpdate(guard: NavigationGuard<RouteNamedMap>): void

  export const RouterLink: RouterLinkTyped<RouteNamedMap>
  export const RouterLinkProps: RouterLinkPropsTyped<RouteNamedMap>

  // Experimental Data Fetching

  export function defineLoader<
    P extends Promise<any>,
    Name extends keyof RouteNamedMap = keyof RouteNamedMap,
    isLazy extends boolean = false,
  >(
    name: Name,
    loader: (route: RouteLocationNormalizedLoaded<Name>) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>
  export function defineLoader<
    P extends Promise<any>,
    isLazy extends boolean = false,
  >(
    loader: (route: RouteLocationNormalizedLoaded) => P,
    options?: _DefineLoaderOptions<isLazy>,
  ): _DataLoader<Awaited<P>, isLazy>

  export {
    _definePage as definePage,
    _HasDataLoaderMeta as HasDataLoaderMeta,
    _setupDataFetchingGuard as setupDataFetchingGuard,
    _stopDataFetchingScope as stopDataFetchingScope,
  } from 'unplugin-vue-router/runtime'
}

declare module 'vue-router' {
  import type { RouteNamedMap } from 'vue-router/auto/routes'

  export interface TypesConfig {
    beforeRouteUpdate: NavigationGuard<RouteNamedMap>
    beforeRouteLeave: NavigationGuard<RouteNamedMap>

    $route: RouteLocationNormalizedLoadedTypedList<RouteNamedMap>[keyof RouteNamedMap]
    $router: _RouterTyped<RouteNamedMap>

    RouterLink: RouterLinkTyped<RouteNamedMap>
  }
}
